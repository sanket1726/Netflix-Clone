{"version":3,"sources":["config/requests.js","config/network.js","components/Banner.js","components/Navbar.js","components/VideoModal.js","components/VideoRow.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","language","requests","fetchTrendingMovies","fetchUpcomingMovies","fetchLatestMovies","fetchNowPlaying","fetchTopRated","fetchNetflixOriginals","fetchActionMovie","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","module","exports","instance","axios","create","baseURL","Banner","loadBannerMovie","str","n","useState","movie","setMovie","useEffect","a","get","then","res","status","data","console","log","results","Math","floor","random","length","catch","err","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","VideoModal","props","modalState","closeModal","videoId","Modal","isOpen","toggle","ModalBody","opts","height","width","playerVars","autoplay","VideoRow","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","setModalState","request","handleClick","baseUrl","id","key","alert","map","poster_path","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4d3da63.chunk.js","sourcesContent":["const API_KEY = \"425d6d8ee728b9b4c3f38b70c1a77923\";\r\n// const BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\nconst language = {\r\n  en_US: \"en-US\",\r\n};\r\n\r\nconst requests = {\r\n  fetchTrendingMovies: `/trending/movie/week?api_key=${API_KEY}`,\r\n  fetchUpcomingMovies: `/movie/upcoming?api_key=${API_KEY}&language=${language.en_US}&page=1`,\r\n  fetchLatestMovies: `/movie/latest?api_key=${API_KEY}&language=${language.en_US}`,\r\n  fetchNowPlaying: `/movie/now_playing?api_key=${API_KEY}&language=${language.en_US}&page=1`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=${language.en_US}&page=1`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_netoworks=213`,\r\n  fetchActionMovie: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\n// export default requests;\r\nmodule.exports = {\r\n  requests: requests,\r\n  API_KEY: API_KEY,\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({ baseURL: \"https://api.themoviedb.org/3\" });\r\n\r\nexport default instance;\r\n\r\n// https://api.themoviedb.org/3/trending/movie/week?api_key=425d6d8ee728b9b4c3f38b70c1a77923\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Banner.css\";\r\nimport axios from \"../config/network\";\r\nimport { requests } from \"../config/requests\";\r\n\r\nconst Banner = ({ loadBannerMovie }) => {\r\n  const imgUrl = `https://image.tmdb.org/t/p/original`;\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios\r\n        .get(requests.fetchNetflixOriginals)\r\n        .then((res) => {\r\n          const { status, data } = res;\r\n          if (status === 200) {\r\n            console.log(\r\n              data.results[Math.floor(Math.random() * data.results.length - 1)]\r\n            );\r\n            setMovie(\r\n              data.results[Math.floor(Math.random() * data.results.length - 1)]\r\n            );\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n      //   const randomMovie = Math.random() * request.data.results.length -1\r\n      // This is fetching at higher speed\r\n      // setMovie(request?.data?.results);\r\n      // return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(movie);\r\n  }, [movie]);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str?.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n        backgroundPosition: \"top\",\r\n      }}\r\n    >\r\n      <div className='banner_contents'>\r\n        {/* title */}\r\n        <h1 className='banner_title'>\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n\r\n        {/* Banner buttons */}\r\n        <div className='banner_buttons'>\r\n          <button className='banner_button'>Play</button>\r\n          <button className='banner_button'>My List</button>\r\n        </div>\r\n\r\n        {/* Description */}\r\n        <div>\r\n          <h1 className='banner_description'>\r\n            {truncate(movie?.overview, 150)}\r\n          </h1>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <div className='banner_fadeBottom'></div> */}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Nav.css\";\r\n\r\nconst Navbar = () => {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show ? \"nav_black\" : \"\"}`}>\r\n      <img\r\n        className='nav_logo'\r\n        src='https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Netflix_logo_%282%29.svg/399px-Netflix_logo_%282%29.svg.png'\r\n        alt='Netflix Logo'\r\n      />\r\n      <img\r\n        className='nav_avatar'\r\n        src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\r\n        alt='Netflix Avatar'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { GiSplitCross } from \"react-icons/gi\";\r\nimport YouTube from \"react-youtube\";\r\nimport \"../styles/VideoModal.css\";\r\nconst VideoModal = (props) => {\r\n  const { modalState, closeModal, videoId } = props;\r\n\r\n  const playerConfig = {\r\n    height: \"500\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(videoId);\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modalState} toggle={closeModal}>\r\n        <ModalBody className='videoModal_body'>\r\n          <YouTube videoId={videoId} opts={playerConfig} />\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\n\r\nimport axios from \"../config/network\";\r\nimport \"../styles/Row.css\";\r\nimport VideoModal from \"./VideoModal\";\r\n\r\nconst VideoRow = (props) => {\r\n  const { title, fetchUrl, isLargeRow } = props;\r\n  const imgUrl = `https://image.tmdb.org/t/p/original/`;\r\n  // useStates\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  const [modalState, setModalState] = useState(false);\r\n\r\n  // useEffects\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(\"-------------->\" + title);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const playerConfig = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = async (movie) => {\r\n    const baseUrl = `https://api.themoviedb.org/3/movie/${movie.id}/videos?api_key=425d6d8ee728b9b4c3f38b70c1a77923&language=en-US\r\n`;\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      console.log(movie);\r\n      console.log(baseUrl);\r\n      const youtubeUrl = await axios\r\n        .get(`${baseUrl}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          const { data, status } = res;\r\n          if (status === 200 && data.results.length > 0) {\r\n            setModalState(true);\r\n            setTrailerUrl(data?.results[0]?.key);\r\n          } else {\r\n            alert(\"Oops No Videos Available for this!!\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          alert(\"Oops No Videos Available for this!!\");\r\n        });\r\n    }\r\n  };\r\n\r\n  const closeVideo = () => {\r\n    setTrailerUrl(\"\");\r\n    setModalState(false);\r\n  };\r\n\r\n  return (\r\n    <div className='row'>\r\n      {/*  */}\r\n      {modalState && (\r\n        <VideoModal\r\n          modalState={modalState}\r\n          closeModal={() => closeVideo()}\r\n          videoId={trailerUrl && trailerUrl}\r\n        />\r\n      )}\r\n\r\n      <h2>{title}</h2>\r\n      <div className='row_posters'>\r\n        {/* row_posters */}\r\n        {movies.map((movie) => {\r\n          const { id, title, poster_path, backdrop_path, name } = movie;\r\n          return (\r\n            <img\r\n              onClick={() => {\r\n                handleClick(movie);\r\n              }}\r\n              className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n              key={id}\r\n              src={`${imgUrl}${isLargeRow ? poster_path : backdrop_path}`}\r\n              alt={name}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {/* {trailerUrl && <YouTube videoId={trailerUrl} opts={playerConfig} />} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoRow;\r\n","import React, { useState } from \"react\";\nimport Banner from \"./components/Banner\";\nimport Navbar from \"./components/Navbar\";\nimport VideoRow from \"./components/VideoRow\";\nimport { requests } from \"./config/requests\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n  return (\n    <div className='App'>\n      {/* NavBar */}\n      <Navbar />\n      {/* Banner */}\n      <Banner loadBannerMovie />\n      <VideoRow\n        isLargeRow\n        title='Netflix Originals'\n        fetchUrl={requests.fetchNetflixOriginals}\n      />\n      <VideoRow\n        title='Trending Movies'\n        fetchUrl={requests.fetchTrendingMovies}\n      />\n      <VideoRow\n        title='Upcoming Movies'\n        fetchUrl={requests.fetchUpcomingMovies}\n      />\n      <VideoRow title='Now Playing' fetchUrl={requests.fetchNowPlaying} />\n      <VideoRow title='Top Rated' fetchUrl={requests.fetchTopRated} />\n      <VideoRow title='Action Movies' fetchUrl={requests.fetchActionMovie} />\n      <VideoRow title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n      <VideoRow title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n      <VideoRow title='Documentries' fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}